/* tslint:disable */
/* eslint-disable */
/**
 * USKB Tournament
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CategoryResult
 */
export interface CategoryResult {
    /**
     * 
     * @type {string}
     * @memberof CategoryResult
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryResult
     */
    'alternateName': string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryResult
     */
    'color': string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'minPoints': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'maxPoints': number;
    /**
     * 
     * @type {string}
     * @memberof CategoryResult
     */
    'startTime': string;
    /**
     * 
     * @type {boolean}
     * @memberof CategoryResult
     */
    'womenOnly': boolean;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'baseRegistrationFee': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'lateRegistrationFee': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'rewardFirst': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'rewardSecond': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'rewardSemi': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'rewardQuarter': number | null;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'maxPlayers': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'overbookingPercentage': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'entryCount': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'presentEntryCount': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryResult
     */
    'currentFee': number;
}
/**
 * 
 * @export
 * @interface ContactInfo
 */
export interface ContactInfo {
    /**
     * 
     * @type {string}
     * @memberof ContactInfo
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInfo
     */
    'phone': string | null;
}
/**
 * 
 * @export
 * @interface Entry
 */
export interface Entry {
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    'licenceNo': string;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    'color': string;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    'registrationTime': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Entry
     */
    'markedAsPresent': boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof Entry
     */
    'markedAsPaid': boolean;
}
/**
 * 
 * @export
 * @interface FfttPlayer
 */
export interface FfttPlayer {
    /**
     * 
     * @type {string}
     * @memberof FfttPlayer
     */
    'licenceNo': string;
    /**
     * 
     * @type {string}
     * @memberof FfttPlayer
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof FfttPlayer
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof FfttPlayer
     */
    'club': string;
    /**
     * 
     * @type {Gender}
     * @memberof FfttPlayer
     */
    'gender': Gender;
    /**
     * 
     * @type {number}
     * @memberof FfttPlayer
     */
    'nbPoints': number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Gender = {
    M: 'M',
    F: 'F'
} as const;

export type Gender = typeof Gender[keyof typeof Gender];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'licenceNo': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'club': string;
    /**
     * 
     * @type {Gender}
     * @memberof Player
     */
    'gender': Gender;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'nbPoints': number;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'bibNo'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Player
     */
    'phone': string | null;
    /**
     * 
     * @type {number}
     * @memberof Player
     */
    'totalActualPaid': number | null;
}


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Api Public Add Player
         * @param {string} licenceNo 
         * @param {ContactInfo} contactInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPlayer: async (licenceNo: string, contactInfo: ContactInfo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenceNo' is not null or undefined
            assertParamExists('addPlayer', 'licenceNo', licenceNo)
            // verify required parameter 'contactInfo' is not null or undefined
            assertParamExists('addPlayer', 'contactInfo', contactInfo)
            const localVarPath = `/players/{licence_no}`
                .replace(`{${"licence_no"}}`, encodeURIComponent(String(licenceNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Public Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Public Get Entries
         * @param {string} licenceNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntries: async (licenceNo: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenceNo' is not null or undefined
            assertParamExists('getEntries', 'licenceNo', licenceNo)
            const localVarPath = `/entries/<licence_no>`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (licenceNo !== undefined) {
                localVarQueryParameter['licence_no'] = licenceNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Public Get Player
         * @param {string} licenceNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer: async (licenceNo: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenceNo' is not null or undefined
            assertParamExists('getPlayer', 'licenceNo', licenceNo)
            const localVarPath = `/players/<licence_no>`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (licenceNo !== undefined) {
                localVarQueryParameter['licence_no'] = licenceNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Public Register Entries
         * @param {string} licenceNo 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerEntries: async (licenceNo: string, requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenceNo' is not null or undefined
            assertParamExists('registerEntries', 'licenceNo', licenceNo)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('registerEntries', 'requestBody', requestBody)
            const localVarPath = `/entries/<licence_no>`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (licenceNo !== undefined) {
                localVarQueryParameter['licence_no'] = licenceNo;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Api Public Add Player
         * @param {string} licenceNo 
         * @param {ContactInfo} contactInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPlayer(licenceNo: string, contactInfo: ContactInfo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Player>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPlayer(licenceNo, contactInfo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addPlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Public Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Public Get Entries
         * @param {string} licenceNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntries(licenceNo: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Entry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntries(licenceNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getEntries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Public Get Player
         * @param {string} licenceNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayer(licenceNo: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FfttPlayer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayer(licenceNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPlayer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Api Public Register Entries
         * @param {string} licenceNo 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerEntries(licenceNo: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Player>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerEntries(licenceNo, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerEntries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Api Public Add Player
         * @param {string} licenceNo 
         * @param {ContactInfo} contactInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPlayer(licenceNo: string, contactInfo: ContactInfo, options?: RawAxiosRequestConfig): AxiosPromise<Player> {
            return localVarFp.addPlayer(licenceNo, contactInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Public Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: RawAxiosRequestConfig): AxiosPromise<Array<CategoryResult>> {
            return localVarFp.getCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Public Get Entries
         * @param {string} licenceNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntries(licenceNo: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Entry>> {
            return localVarFp.getEntries(licenceNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Public Get Player
         * @param {string} licenceNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(licenceNo: string, options?: RawAxiosRequestConfig): AxiosPromise<FfttPlayer> {
            return localVarFp.getPlayer(licenceNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Public Register Entries
         * @param {string} licenceNo 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerEntries(licenceNo: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Player> {
            return localVarFp.registerEntries(licenceNo, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Api Public Add Player
     * @param {string} licenceNo 
     * @param {ContactInfo} contactInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPlayer(licenceNo: string, contactInfo: ContactInfo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addPlayer(licenceNo, contactInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Public Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCategories(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Public Get Entries
     * @param {string} licenceNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEntries(licenceNo: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEntries(licenceNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Public Get Player
     * @param {string} licenceNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPlayer(licenceNo: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPlayer(licenceNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Public Register Entries
     * @param {string} licenceNo 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerEntries(licenceNo: string, requestBody: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerEntries(licenceNo, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



