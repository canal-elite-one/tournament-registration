/* tslint:disable */
/* eslint-disable */
/**
 * USKB Tournament
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Entry
 */
export interface Entry {
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    categoryId: string;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    licenceNo: string;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    color: string;
    /**
     * 
     * @type {Date}
     * @memberof Entry
     */
    registrationTime: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof Entry
     */
    markedAsPresent: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof Entry
     */
    markedAsPaid: boolean;
}

/**
 * Check if a given object implements the Entry interface.
 */
export function instanceOfEntry(value: object): value is Entry {
    if (!('categoryId' in value) || value['categoryId'] === undefined) return false;
    if (!('licenceNo' in value) || value['licenceNo'] === undefined) return false;
    if (!('color' in value) || value['color'] === undefined) return false;
    if (!('registrationTime' in value) || value['registrationTime'] === undefined) return false;
    if (!('markedAsPresent' in value) || value['markedAsPresent'] === undefined) return false;
    if (!('markedAsPaid' in value) || value['markedAsPaid'] === undefined) return false;
    return true;
}

export function EntryFromJSON(json: any): Entry {
    return EntryFromJSONTyped(json, false);
}

export function EntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entry {
    if (json == null) {
        return json;
    }
    return {
        
        'categoryId': json['categoryId'],
        'licenceNo': json['licenceNo'],
        'color': json['color'],
        'registrationTime': (json['registrationTime'] == null ? null : new Date(json['registrationTime'])),
        'markedAsPresent': json['markedAsPresent'],
        'markedAsPaid': json['markedAsPaid'],
    };
}

export function EntryToJSON(json: any): Entry {
    return EntryToJSONTyped(json, false);
}

export function EntryToJSONTyped(value?: Entry | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'categoryId': value['categoryId'],
        'licenceNo': value['licenceNo'],
        'color': value['color'],
        'registrationTime': (value['registrationTime'] == null ? null : (value['registrationTime'] as any).toISOString()),
        'markedAsPresent': value['markedAsPresent'],
        'markedAsPaid': value['markedAsPaid'],
    };
}

