/* tslint:disable */
/* eslint-disable */
/**
 * USKB Tournament
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    categoryId: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    alternateName: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    color: string | null;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    minPoints: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    maxPoints: number;
    /**
     * 
     * @type {Date}
     * @memberof Category
     */
    startTime: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Category
     */
    womenOnly: boolean;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    baseRegistrationFee: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    lateRegistrationFee: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    rewardFirst: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    rewardSecond: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    rewardSemi: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    rewardQuarter: number | null;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    maxPlayers: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    overbookingPercentage: number;
}

/**
 * Check if a given object implements the Category interface.
 */
export function instanceOfCategory(value: object): value is Category {
    if (!('categoryId' in value) || value['categoryId'] === undefined) return false;
    if (!('alternateName' in value) || value['alternateName'] === undefined) return false;
    if (!('color' in value) || value['color'] === undefined) return false;
    if (!('minPoints' in value) || value['minPoints'] === undefined) return false;
    if (!('maxPoints' in value) || value['maxPoints'] === undefined) return false;
    if (!('startTime' in value) || value['startTime'] === undefined) return false;
    if (!('womenOnly' in value) || value['womenOnly'] === undefined) return false;
    if (!('baseRegistrationFee' in value) || value['baseRegistrationFee'] === undefined) return false;
    if (!('lateRegistrationFee' in value) || value['lateRegistrationFee'] === undefined) return false;
    if (!('rewardFirst' in value) || value['rewardFirst'] === undefined) return false;
    if (!('rewardSecond' in value) || value['rewardSecond'] === undefined) return false;
    if (!('rewardSemi' in value) || value['rewardSemi'] === undefined) return false;
    if (!('rewardQuarter' in value) || value['rewardQuarter'] === undefined) return false;
    if (!('maxPlayers' in value) || value['maxPlayers'] === undefined) return false;
    if (!('overbookingPercentage' in value) || value['overbookingPercentage'] === undefined) return false;
    return true;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if (json == null) {
        return json;
    }
    return {
        
        'categoryId': json['categoryId'],
        'alternateName': json['alternateName'],
        'color': json['color'],
        'minPoints': json['minPoints'],
        'maxPoints': json['maxPoints'],
        'startTime': (new Date(json['startTime'])),
        'womenOnly': json['womenOnly'],
        'baseRegistrationFee': json['baseRegistrationFee'],
        'lateRegistrationFee': json['lateRegistrationFee'],
        'rewardFirst': json['rewardFirst'],
        'rewardSecond': json['rewardSecond'],
        'rewardSemi': json['rewardSemi'],
        'rewardQuarter': json['rewardQuarter'],
        'maxPlayers': json['maxPlayers'],
        'overbookingPercentage': json['overbookingPercentage'],
    };
}

export function CategoryToJSON(json: any): Category {
    return CategoryToJSONTyped(json, false);
}

export function CategoryToJSONTyped(value?: Category | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'categoryId': value['categoryId'],
        'alternateName': value['alternateName'],
        'color': value['color'],
        'minPoints': value['minPoints'],
        'maxPoints': value['maxPoints'],
        'startTime': ((value['startTime']).toISOString()),
        'womenOnly': value['womenOnly'],
        'baseRegistrationFee': value['baseRegistrationFee'],
        'lateRegistrationFee': value['lateRegistrationFee'],
        'rewardFirst': value['rewardFirst'],
        'rewardSecond': value['rewardSecond'],
        'rewardSemi': value['rewardSemi'],
        'rewardQuarter': value['rewardQuarter'],
        'maxPlayers': value['maxPlayers'],
        'overbookingPercentage': value['overbookingPercentage'],
    };
}

