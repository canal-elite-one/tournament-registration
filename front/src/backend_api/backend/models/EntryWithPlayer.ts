/* tslint:disable */
/* eslint-disable */
/**
 * USKB Tournament
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Gender } from './Gender';
import {
    GenderFromJSON,
    GenderFromJSONTyped,
    GenderToJSON,
    GenderToJSONTyped,
} from './Gender';

/**
 * 
 * @export
 * @interface EntryWithPlayer
 */
export interface EntryWithPlayer {
    /**
     * 
     * @type {string}
     * @memberof EntryWithPlayer
     */
    categoryId: string;
    /**
     * 
     * @type {string}
     * @memberof EntryWithPlayer
     */
    licenceNo: string;
    /**
     * 
     * @type {string}
     * @memberof EntryWithPlayer
     */
    color: string | null;
    /**
     * 
     * @type {Date}
     * @memberof EntryWithPlayer
     */
    registrationTime: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof EntryWithPlayer
     */
    markedAsPresent: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof EntryWithPlayer
     */
    markedAsPaid: boolean;
    /**
     * 
     * @type {string}
     * @memberof EntryWithPlayer
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof EntryWithPlayer
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof EntryWithPlayer
     */
    club: string;
    /**
     * 
     * @type {Gender}
     * @memberof EntryWithPlayer
     */
    gender: Gender;
    /**
     * 
     * @type {number}
     * @memberof EntryWithPlayer
     */
    nbPoints: number;
    /**
     * 
     * @type {number}
     * @memberof EntryWithPlayer
     */
    bibNo?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EntryWithPlayer
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof EntryWithPlayer
     */
    phone: string | null;
    /**
     * 
     * @type {number}
     * @memberof EntryWithPlayer
     */
    totalActualPaid: number | null;
}



/**
 * Check if a given object implements the EntryWithPlayer interface.
 */
export function instanceOfEntryWithPlayer(value: object): value is EntryWithPlayer {
    if (!('categoryId' in value) || value['categoryId'] === undefined) return false;
    if (!('licenceNo' in value) || value['licenceNo'] === undefined) return false;
    if (!('color' in value) || value['color'] === undefined) return false;
    if (!('registrationTime' in value) || value['registrationTime'] === undefined) return false;
    if (!('markedAsPresent' in value) || value['markedAsPresent'] === undefined) return false;
    if (!('markedAsPaid' in value) || value['markedAsPaid'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('club' in value) || value['club'] === undefined) return false;
    if (!('gender' in value) || value['gender'] === undefined) return false;
    if (!('nbPoints' in value) || value['nbPoints'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('phone' in value) || value['phone'] === undefined) return false;
    if (!('totalActualPaid' in value) || value['totalActualPaid'] === undefined) return false;
    return true;
}

export function EntryWithPlayerFromJSON(json: any): EntryWithPlayer {
    return EntryWithPlayerFromJSONTyped(json, false);
}

export function EntryWithPlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntryWithPlayer {
    if (json == null) {
        return json;
    }
    return {
        
        'categoryId': json['categoryId'],
        'licenceNo': json['licenceNo'],
        'color': json['color'],
        'registrationTime': (json['registrationTime'] == null ? null : new Date(json['registrationTime'])),
        'markedAsPresent': json['markedAsPresent'],
        'markedAsPaid': json['markedAsPaid'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'club': json['club'],
        'gender': GenderFromJSON(json['gender']),
        'nbPoints': json['nbPoints'],
        'bibNo': json['bibNo'] == null ? undefined : json['bibNo'],
        'email': json['email'],
        'phone': json['phone'],
        'totalActualPaid': json['totalActualPaid'],
    };
}

export function EntryWithPlayerToJSON(json: any): EntryWithPlayer {
    return EntryWithPlayerToJSONTyped(json, false);
}

export function EntryWithPlayerToJSONTyped(value?: EntryWithPlayer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'categoryId': value['categoryId'],
        'licenceNo': value['licenceNo'],
        'color': value['color'],
        'registrationTime': (value['registrationTime'] == null ? null : (value['registrationTime'] as any).toISOString()),
        'markedAsPresent': value['markedAsPresent'],
        'markedAsPaid': value['markedAsPaid'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'club': value['club'],
        'gender': GenderToJSON(value['gender']),
        'nbPoints': value['nbPoints'],
        'bibNo': value['bibNo'],
        'email': value['email'],
        'phone': value['phone'],
        'totalActualPaid': value['totalActualPaid'],
    };
}

