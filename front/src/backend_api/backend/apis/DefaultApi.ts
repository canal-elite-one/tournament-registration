/* tslint:disable */
/* eslint-disable */
/**
 * USKB Tournament
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryResult,
  ContactInfo,
  Entry,
  FfttPlayer,
  HTTPValidationError,
  Player,
  RegisterEntriesBody,
} from '../models/index';
import {
    CategoryResultFromJSON,
    CategoryResultToJSON,
    ContactInfoFromJSON,
    ContactInfoToJSON,
    EntryFromJSON,
    EntryToJSON,
    FfttPlayerFromJSON,
    FfttPlayerToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PlayerFromJSON,
    PlayerToJSON,
    RegisterEntriesBodyFromJSON,
    RegisterEntriesBodyToJSON,
} from '../models/index';

export interface AddPlayerRequest {
    licenceNo: string;
    contactInfo: ContactInfo;
}

export interface GetEntriesRequest {
    licenceNo: string;
}

export interface GetPlayerRequest {
    licenceNo: string;
}

export interface RegisterEntriesRequest {
    licenceNo: string;
    registerEntriesBody: RegisterEntriesBody;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Api Public Add Player
     */
    async addPlayerRaw(requestParameters: AddPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['licenceNo'] == null) {
            throw new runtime.RequiredError(
                'licenceNo',
                'Required parameter "licenceNo" was null or undefined when calling addPlayer().'
            );
        }

        if (requestParameters['contactInfo'] == null) {
            throw new runtime.RequiredError(
                'contactInfo',
                'Required parameter "contactInfo" was null or undefined when calling addPlayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/players/{licence_no}`.replace(`{${"licence_no"}}`, encodeURIComponent(String(requestParameters['licenceNo']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactInfoToJSON(requestParameters['contactInfo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     * Api Public Add Player
     */
    async addPlayer(requestParameters: AddPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.addPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Public Get Categories
     */
    async getCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryResult>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryResultFromJSON));
    }

    /**
     * Api Public Get Categories
     */
    async getCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryResult>> {
        const response = await this.getCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Api Public Get Entries
     */
    async getEntriesRaw(requestParameters: GetEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Entry>>> {
        if (requestParameters['licenceNo'] == null) {
            throw new runtime.RequiredError(
                'licenceNo',
                'Required parameter "licenceNo" was null or undefined when calling getEntries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['licenceNo'] != null) {
            queryParameters['licence_no'] = requestParameters['licenceNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/entries/<licence_no>`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntryFromJSON));
    }

    /**
     * Api Public Get Entries
     */
    async getEntries(requestParameters: GetEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Entry>> {
        const response = await this.getEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Public Get Player
     */
    async getPlayerRaw(requestParameters: GetPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FfttPlayer>> {
        if (requestParameters['licenceNo'] == null) {
            throw new runtime.RequiredError(
                'licenceNo',
                'Required parameter "licenceNo" was null or undefined when calling getPlayer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['licenceNo'] != null) {
            queryParameters['licence_no'] = requestParameters['licenceNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/players/<licence_no>`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FfttPlayerFromJSON(jsonValue));
    }

    /**
     * Api Public Get Player
     */
    async getPlayer(requestParameters: GetPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FfttPlayer> {
        const response = await this.getPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Public Register Entries
     */
    async registerEntriesRaw(requestParameters: RegisterEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['licenceNo'] == null) {
            throw new runtime.RequiredError(
                'licenceNo',
                'Required parameter "licenceNo" was null or undefined when calling registerEntries().'
            );
        }

        if (requestParameters['registerEntriesBody'] == null) {
            throw new runtime.RequiredError(
                'registerEntriesBody',
                'Required parameter "registerEntriesBody" was null or undefined when calling registerEntries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['licenceNo'] != null) {
            queryParameters['licence_no'] = requestParameters['licenceNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/entries/<licence_no>`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterEntriesBodyToJSON(requestParameters['registerEntriesBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     * Api Public Register Entries
     */
    async registerEntries(requestParameters: RegisterEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.registerEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
